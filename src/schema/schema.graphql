### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Document {
  author: User
  collectors(after: Int, before: Int, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  content: String
  contentRaw: String
  createdAt: DateTime!
  draft: String
  files(after: Int, before: Int, first: Int, last: Int, skip: Int): [File!]!
  id: Int!
  isDraft: Boolean!
  isPublic: Boolean!
  isPublish: Boolean!
  likeCount: Int!
  readCount: Int!
  subject: String!
  updatedAt: DateTime!
}

input DocumentCreateManyWithoutDocumentsCollectedInput {
  connect: [DocumentWhereUniqueInput!]
  create: [DocumentCreateWithoutCollectorsInput!]
}

input DocumentCreateManyWithoutDocumentsInput {
  connect: [DocumentWhereUniqueInput!]
  create: [DocumentCreateWithoutAuthorInput!]
}

input DocumentCreateOneWithoutDocumentInput {
  connect: DocumentWhereUniqueInput
  create: DocumentCreateWithoutFilesInput
}

input DocumentCreateWithoutAuthorInput {
  collectors: UserCreateManyWithoutCollectorsInput
  content: String
  contentRaw: String
  createdAt: DateTime
  draft: String
  files: FileCreateManyWithoutFilesInput
  isPublic: Boolean
  likeCount: Int
  readCount: Int
  subject: String!
  updatedAt: DateTime
}

input DocumentCreateWithoutCollectorsInput {
  author: UserCreateOneWithoutAuthorInput
  content: String
  contentRaw: String
  createdAt: DateTime
  draft: String
  files: FileCreateManyWithoutFilesInput
  isPublic: Boolean
  likeCount: Int
  readCount: Int
  subject: String!
  updatedAt: DateTime
}

input DocumentCreateWithoutFilesInput {
  author: UserCreateOneWithoutAuthorInput
  collectors: UserCreateManyWithoutCollectorsInput
  content: String
  contentRaw: String
  createdAt: DateTime
  draft: String
  isPublic: Boolean
  likeCount: Int
  readCount: Int
  subject: String!
  updatedAt: DateTime
}

input DocumentFilter {
  every: DocumentWhereInput
  none: DocumentWhereInput
  some: DocumentWhereInput
}

input DocumentOrderByInput {
  content: OrderByArg
  contentRaw: OrderByArg
  createdAt: OrderByArg
  draft: OrderByArg
  id: OrderByArg
  isPublic: OrderByArg
  likeCount: OrderByArg
  readCount: OrderByArg
  subject: OrderByArg
  updatedAt: OrderByArg
}

input DocumentWhereInput {
  AND: [DocumentWhereInput!]
  author: UserWhereInput
  collectors: UserFilter
  content: NullableStringFilter
  contentRaw: NullableStringFilter
  createdAt: DateTimeFilter
  draft: NullableStringFilter
  files: FileFilter
  id: IntFilter
  isPublic: BooleanFilter
  likeCount: IntFilter
  NOT: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  readCount: IntFilter
  subject: StringFilter
  updatedAt: DateTimeFilter
}

input DocumentWhereUniqueInput {
  id: Int
}

type File {
  alias: String
  contentType: String!
  createdAt: DateTime!
  document: Document
  id: Int!
  name: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

input FileCreateManyWithoutFilesInput {
  connect: [FileWhereUniqueInput!]
  create: [FileCreateWithoutDocumentInput!]
}

input FileCreateOneWithoutAvatarInput {
  connect: FileWhereUniqueInput
  create: FileCreateWithoutUserInput
}

input FileCreateWithoutDocumentInput {
  alias: String
  contentType: String!
  createdAt: DateTime
  eTag: String!
  name: String!
  size: Int!
  updatedAt: DateTime
  url: String!
  user: UserCreateOneWithoutUserInput
}

input FileCreateWithoutUserInput {
  alias: String
  contentType: String!
  createdAt: DateTime
  document: DocumentCreateOneWithoutDocumentInput
  eTag: String!
  name: String!
  size: Int!
  updatedAt: DateTime
  url: String!
}

input FileFilter {
  every: FileWhereInput
  none: FileWhereInput
  some: FileWhereInput
}

input FileInputType {
  contentType: String!
  eTag: String!
  name: String!
  size: Int!
  url: String!
}

input FileWhereInput {
  alias: NullableStringFilter
  AND: [FileWhereInput!]
  contentType: StringFilter
  createdAt: DateTimeFilter
  document: DocumentWhereInput
  eTag: StringFilter
  id: IntFilter
  name: StringFilter
  NOT: [FileWhereInput!]
  OR: [FileWhereInput!]
  size: IntFilter
  updatedAt: DateTimeFilter
  url: StringFilter
  user: UserWhereInput
}

input FileWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type MsgData {
  code: String!
  message: String!
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  deleteDocument(id: Int!): Document!
  documentCollect(id: Int!): Document!
  documentLike(id: Int!): Document!
  documentPublish(content: String!, contentRaw: String!, draft: String, id: Int, isPublish: Boolean!, subject: String!): Document!
  getOSSPolicy: OSSPolicy!
  login(name: String!, password: String!): AuthPayload!
  signup(alias: String, name: String!, password: String!): AuthPayload!
  uploadDocFile(contentType: String!, eTag: String!, id: Int!, name: String!, size: Int!, url: String!): File!
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type OSSPolicy {
  accessId: String!
  dir: String!
  expire: String!
  host: String!
  policy: String!
  signature: String!
}

type Query {
  document(where: DocumentWhereUniqueInput!): Document
  documents(after: Int, before: Int, first: Int, last: Int, orderBy: DocumentOrderByInput, skip: Int, where: DocumentWhereInput): [Document!]!
  file(where: FileWhereUniqueInput!): File
  files(after: Int, before: Int, first: Int, last: Int, skip: Int): [File!]!
  me: User
  user(where: UserWhereUniqueInput!): User
  users(after: Int, before: Int, first: Int, last: Int, skip: Int): [User!]!
}

enum Sex {
  FEMALE
  MALE
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  alias: String
  avatar: File
  createdAt: DateTime!
  desc: String
  documents(after: Int, before: Int, first: Int, last: Int, orderBy: DocumentOrderByInput, skip: Int, where: DocumentWhereInput): [Document!]!
  documentsCollected(after: Int, before: Int, first: Int, last: Int, orderBy: DocumentOrderByInput, skip: Int, where: DocumentWhereInput): [Document!]!
  id: Int!
  name: String!
  phone: String
  sex: Sex
  updatedAt: DateTime!
}

input UserCreateInput {
  alias: String
  avatar: FileCreateOneWithoutAvatarInput
  createdAt: DateTime
  desc: String
  documents: DocumentCreateManyWithoutDocumentsInput
  documentsCollected: DocumentCreateManyWithoutDocumentsCollectedInput
  name: String!
  password: String
  phone: String
  sex: Sex
  unionId: String!
  updatedAt: DateTime
}

input UserCreateManyWithoutCollectorsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutDocumentsCollectedInput!]
}

input UserCreateOneWithoutAuthorInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDocumentsInput
}

input UserCreateOneWithoutUserInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAvatarInput
}

input UserCreateWithoutAvatarInput {
  alias: String
  createdAt: DateTime
  desc: String
  documents: DocumentCreateManyWithoutDocumentsInput
  documentsCollected: DocumentCreateManyWithoutDocumentsCollectedInput
  name: String!
  password: String
  phone: String
  sex: Sex
  unionId: String!
  updatedAt: DateTime
}

input UserCreateWithoutDocumentsCollectedInput {
  alias: String
  avatar: FileCreateOneWithoutAvatarInput
  createdAt: DateTime
  desc: String
  documents: DocumentCreateManyWithoutDocumentsInput
  name: String!
  password: String
  phone: String
  sex: Sex
  unionId: String!
  updatedAt: DateTime
}

input UserCreateWithoutDocumentsInput {
  alias: String
  avatar: FileCreateOneWithoutAvatarInput
  createdAt: DateTime
  desc: String
  documentsCollected: DocumentCreateManyWithoutDocumentsCollectedInput
  name: String!
  password: String
  phone: String
  sex: Sex
  unionId: String!
  updatedAt: DateTime
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  alias: OrderByArg
  createdAt: OrderByArg
  desc: OrderByArg
  id: OrderByArg
  name: OrderByArg
  password: OrderByArg
  phone: OrderByArg
  sex: OrderByArg
  unionId: OrderByArg
  updatedAt: OrderByArg
}

input UserWhereInput {
  alias: NullableStringFilter
  AND: [UserWhereInput!]
  avatar: FileWhereInput
  createdAt: DateTimeFilter
  desc: NullableStringFilter
  documents: DocumentFilter
  documentsCollected: DocumentFilter
  id: IntFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: NullableStringFilter
  phone: NullableStringFilter
  sex: Sex
  unionId: StringFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  id: Int
  name: String
  phone: String
  unionId: String
}
